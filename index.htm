<!DOCTYPE html>
<html>
<head>
  <title>WebSocket Chat</title>
</head>
<body>
  <h1>WebSocket Chat</h1>

  <button id="createBtn">Create Chat Room</button>
  <label for="chatRoomId">Chat Room ID:</label>
  <input type="text" id="chatRoomId" readonly>
  <button id="joinBtn">Join Chat Room</button>

  <ul id="messagesList"></ul>

  <input type="text" id="messageInput" placeholder="Enter your message">
  <button id="sendBtn">Send</button>

  <script>
    // Retrieve DOM elements
    const createBtn = document.getElementById('createBtn');
    const joinBtn = document.getElementById('joinBtn');
    const chatRoomId = document.getElementById('chatRoomId');
    const messageInput = document.getElementById('messageInput');
    const sendBtn = document.getElementById('sendBtn');
    const messagesList = document.getElementById('messagesList');

    // Create a WebSocket connection
    const socket = new WebSocket('ws://cryptomix.onrender.com');

    // Handle connection open
    socket.addEventListener('open', () => {
      console.log('Connected to WebSocket server');
      createChatRoom();
    });

    // Handle connection close
    socket.addEventListener('close', () => {
      console.log('Disconnected from WebSocket server');
    });

    // Function to create a new chat room
    function createChatRoom() {
      console.log('Creating chat room...');
      // Send a POST request to create a chat room
      fetch('https://cryptomix.onrender.com/api/chat/createChat', {
        method: 'POST',
      })
        .then((response) => response.json())
        .then((data) => {
          const roomId = data.roomId;
          console.log('Chat room created with ID:', roomId);

          // Call the joinChatRoom function with the roomId
          joinChatRoom(roomId);

          // Disable the create button
          createBtn.disabled = true;

          // Display the chat room ID
          chatRoomId.value = roomId;
          console.log('Joined chat room with ID:', roomId);
        })
        .catch((error) => {
          console.log('Error creating chat room:', error);
        });
    }

    // Function to join an existing chat room
    function joinChatRoom(roomId) {
      console.log('Joining chat room...');
      // Send the joinChat event with the roomId to the server
      socket.send(JSON.stringify({ type: 'joinChat', roomId: roomId }));

      // Disable the join button and input field
      joinBtn.disabled = true;
      chatRoomId.disabled = true;
      console.log('Joined chat room with ID:', roomId);
    }

    // Handle sending messages
    sendBtn.addEventListener('click', () => {
      const message = messageInput.value;

      // Create a chat message object
      const chatMessage = {
        type: 'chatMessage',
        roomId: chatRoomId.value,
        text: message,
      };

      // Send the chat message to the server
      socket.send(JSON.stringify(chatMessage));

      // Clear the message input field
      messageInput.value = '';
      console.log('Sent chat message:', chatMessage);
    });

    // Handle receiving messages
    socket.addEventListener("message", (event) => {
  console.log('Received message:', event.data);
  try {
    let message;
    let text; // Declare the 'text' variable outside the if statement
    if (event.data instanceof Blob) {
      // Handle Blob data
      const reader = new FileReader();
      reader.onload = function () {
        text = reader.result;
        try {
          message = JSON.parse(text);
          handleMessage(message);
        } catch (error) {
          console.log('Error parsing message:', error);
        }
      };
      reader.readAsText(event.data);
    } else {
      // Handle JSON data
      text = event.data;
      message = JSON.parse(text);
      handleMessage(message);
    }
  } catch (error) {
    console.log('Error handling message:', error);
  }
});

    // Function to handle different types of messages
    function handleMessage(message) {
      // Check the message type
      if (message.type === 'chatMessage') {
        const id = document.getElementById("chatRoomId").value
        console.log(id)
        console.log(message.text)
        displayMessage(message.text);
        updateChatHistory(id,message.text)
      }
    }

    // Function to display a message in the chat room
    function displayMessage(message) {
      const listItem = document.createElement('li');
      listItem.textContent = message;
      messagesList.appendChild(listItem);
      console.log('Received chat message:', message);
    }
    function updateChatHistory(roomId, messages) {
  // Update the chat history for the specified room ID

  // Send a POST request to update the chat history on the server
  fetch('https://cryptomix.onrender.com/api/chat/updateChatHistory', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ roomId, messages }),
  })
    .then((response) => response.json())
    .then((data) => {
      console.log('Chat history updated on the server:', data);
    })
    .catch((error) => {
      console.log('Error updating chat history:', error);
    });
}

  </script>
</body>
</html>
